module.exports = function(fis) {
	var compileMap = fis.get('brick.compileMap', false)

	fis.on('standard:html', function(info) {
		if (info.file.isBrickEntrance) {
			var pageModule = info.file.id.replace(/\..+$/, '')
			info.file.addRequire(pageModule)
		}
	})

	fis.on('compile:optimizer', function(file) {
		if (file.isJsLike && file.isMod) {
			var content = file.getContent()
			content = 'function __BM__(require, exports, module) {' + content + '}'
			file.setContent(content)
		}
	})

	fis.on('process:end', function(file) {
		if (file.isMod) {
			if (file.isCssLike) {
				var content = file.getContent()
				var requires = file.requires
				content = [
					'function __BM__(r){',
					requires.map(function(id) {
						return 'r("' + id + '");'
					}).join(''),
					'r("$insertCSS")(' + JSON.stringify(content) + ')',
					'}'
				].join('')
				file.setContent(content)
				file.isCssLike = false
				file.isJsLike = true
			}
			if (file.isJsLike) {
				var content = file.getContent();
				file.setContent(
					'define(' +
					JSON.stringify(file.moduleId) +
					',' +
					content +
					');'
				);
			}
		}
		if(file['extras']['bKUIComponent']){
			//给文件名加个系统前缀
			file.filename = file.filename+file.ext;
			// 把html变成js文件
			//这里只是处理编译后的文件的命名，至于编译到何处，不管
			file.release = file.release+'.js';
			file.url = file.url+'.js';
			var content = file.getContent();
			var style = [];
			content = content.replace(/<style[^\>]*>([\s\S]*?)<\/style>/ig,function(all,$1){
				$1 = $1.trim();
				if(!/^['"].*['"]$/.test($1)){
					$1 = JSON.stringify($1);
				}
				$1 = $1.slice(1,$1.length-1);
				style.push($1.trim());
				return '';
			});
			style = '"'+style.join('\\n')+'"';
			//提取出所有的依赖
			var dependent = [];
			content = content.replace(/\$require\(\s*['"]([\w\d\.\_\-]+)['"]/ig,function(all,$1){
				dependent.push($1);
				return all;
			});
			var depStr = '';
			dependent.forEach(function(reqMod){
				depStr += 'require("'+reqMod+'");';
			});
			content = content.trim();
			//编译文件
			content = "define('__MODULEID__',function (require, exports, module) {\
				"+depStr+"\
				module.exports = require('$component')('__MODULEID__',{\
					tpl: "+JSON.stringify(content)+",\
					css: "+style+"\
				});\
			})";
			content = content.replace(/__MODULEID__/g,file.filename);
			file.setContent(content);
		}
	})
	if (compileMap) {
		fis.match('::package', {
			postpackager: function(ret) {
				var originMap = ret.map
				var map = {
					paths: {},
					deplist: {}
				}
				var res = originMap.res
				for (var id in res) {
					var value = res[id]
					map.paths[id] = value.uri
					map.deplist[id] = value.deps
				}
				ret.__originMap = originMap
				ret.map = map
			}
		})

		fis.on('release:end', function(ret) {
			ret.map = ret.__originMap
		})
	}
}